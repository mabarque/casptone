{"ast":null,"code":"import { useEffect } from 'react';\nimport ExpoKeepAwake from './ExpoKeepAwake';\nexport const ExpoKeepAwakeTag = 'ExpoKeepAwakeDefaultTag';\n// @needsAudit\n/**\n * A React hook to keep the screen awake for as long as the owner component is mounted.\n * The optionally provided `tag` argument is used when activating and deactivating the keep-awake\n * feature. If unspecified, the default `tag` is used. See the documentation for `activateKeepAwake`\n * below to learn more about the `tag` argument.\n *\n * @param tag *Optional* - Tag to lock screen sleep prevention. If not provided, the default tag is used.\n * @param options *Optional*\n *   - `suppressDeactivateWarnings` *Optional* -\n *      The call will throw an unhandled promise rejection on Android\n *      when the original Activity is dead or deactivated.\n *      Set the value to true for suppressing the uncaught exception.\n */\nexport function useKeepAwake(tag = ExpoKeepAwakeTag, options) {\n  useEffect(() => {\n    activateKeepAwake(tag);\n    return () => {\n      if (options?.suppressDeactivateWarnings) {\n        deactivateKeepAwake(tag).catch(() => {});\n      } else {\n        deactivateKeepAwake(tag);\n      }\n    };\n  }, [tag]);\n}\n// @needsAudit\n/**\n * Prevents the screen from sleeping until `deactivateKeepAwake` is called with the same `tag` value.\n *\n * If the `tag` argument is specified, the screen will not sleep until you call `deactivateKeepAwake`\n * with the same `tag` argument. When using multiple `tags` for activation you'll have to deactivate\n * each one in order to re-enable screen sleep. If tag is unspecified, the default `tag` is used.\n * @param tag *Optional* - Tag to lock screen sleep prevention. If not provided, the default tag is used.\n */\nexport async function activateKeepAwake(tag = ExpoKeepAwakeTag) {\n  await ExpoKeepAwake.activate?.(tag);\n}\n// @needsAudit\n/**\n * Releases the lock on screen-sleep prevention associated with the given `tag` value. If `tag`\n * is unspecified, it defaults to the same default tag that `activateKeepAwake` uses.\n * @param tag *Optional* - Tag to release the lock on screen sleep prevention. If not provided,\n * the default tag is used.\n */\nexport async function deactivateKeepAwake(tag = ExpoKeepAwakeTag) {\n  await ExpoKeepAwake.deactivate?.(tag);\n}","map":{"version":3,"names":["useEffect","ExpoKeepAwake","ExpoKeepAwakeTag","useKeepAwake","tag","options","activateKeepAwake","suppressDeactivateWarnings","deactivateKeepAwake","catch","activate","deactivate"],"sources":["/Users/mariabarqueroleitom/Desktop/webappcapstone/web-app/node_modules/expo-keep-awake/src/index.ts"],"sourcesContent":["import { useEffect } from 'react';\n\nimport ExpoKeepAwake from './ExpoKeepAwake';\n\nexport const ExpoKeepAwakeTag = 'ExpoKeepAwakeDefaultTag';\n\n// @needsAudit\n/**\n * A React hook to keep the screen awake for as long as the owner component is mounted.\n * The optionally provided `tag` argument is used when activating and deactivating the keep-awake\n * feature. If unspecified, the default `tag` is used. See the documentation for `activateKeepAwake`\n * below to learn more about the `tag` argument.\n *\n * @param tag *Optional* - Tag to lock screen sleep prevention. If not provided, the default tag is used.\n * @param options *Optional*\n *   - `suppressDeactivateWarnings` *Optional* -\n *      The call will throw an unhandled promise rejection on Android\n *      when the original Activity is dead or deactivated.\n *      Set the value to true for suppressing the uncaught exception.\n */\nexport function useKeepAwake(\n  tag: string = ExpoKeepAwakeTag,\n  options?: {\n    suppressDeactivateWarnings: boolean;\n  }\n): void {\n  useEffect(() => {\n    activateKeepAwake(tag);\n    return () => {\n      if (options?.suppressDeactivateWarnings) {\n        deactivateKeepAwake(tag).catch(() => {});\n      } else {\n        deactivateKeepAwake(tag);\n      }\n    };\n  }, [tag]);\n}\n\n// @needsAudit\n/**\n * Prevents the screen from sleeping until `deactivateKeepAwake` is called with the same `tag` value.\n *\n * If the `tag` argument is specified, the screen will not sleep until you call `deactivateKeepAwake`\n * with the same `tag` argument. When using multiple `tags` for activation you'll have to deactivate\n * each one in order to re-enable screen sleep. If tag is unspecified, the default `tag` is used.\n * @param tag *Optional* - Tag to lock screen sleep prevention. If not provided, the default tag is used.\n */\n\nexport async function activateKeepAwake(tag: string = ExpoKeepAwakeTag): Promise<void> {\n  await ExpoKeepAwake.activate?.(tag);\n}\n\n// @needsAudit\n/**\n * Releases the lock on screen-sleep prevention associated with the given `tag` value. If `tag`\n * is unspecified, it defaults to the same default tag that `activateKeepAwake` uses.\n * @param tag *Optional* - Tag to release the lock on screen sleep prevention. If not provided,\n * the default tag is used.\n */\nexport async function deactivateKeepAwake(tag: string = ExpoKeepAwakeTag): Promise<void> {\n  await ExpoKeepAwake.deactivate?.(tag);\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AAEjC,OAAOC,aAAa,MAAM,iBAAiB;AAE3C,OAAO,MAAMC,gBAAgB,GAAG,yBAAyB;AAEzD;AACA;;;;;;;;;;;;;AAaA,OAAM,SAAUC,YAAYA,CAC1BC,GAAA,GAAcF,gBAAgB,EAC9BG,OAEC;EAEDL,SAAS,CAAC,MAAK;IACbM,iBAAiB,CAACF,GAAG,CAAC;IACtB,OAAO,MAAK;MACV,IAAIC,OAAO,EAAEE,0BAA0B,EAAE;QACvCC,mBAAmB,CAACJ,GAAG,CAAC,CAACK,KAAK,CAAC,MAAK,CAAE,CAAC,CAAC;OACzC,MAAM;QACLD,mBAAmB,CAACJ,GAAG,CAAC;;IAE5B,CAAC;EACH,CAAC,EAAE,CAACA,GAAG,CAAC,CAAC;AACX;AAEA;AACA;;;;;;;;AASA,OAAO,eAAeE,iBAAiBA,CAACF,GAAA,GAAcF,gBAAgB;EACpE,MAAMD,aAAa,CAACS,QAAQ,GAAGN,GAAG,CAAC;AACrC;AAEA;AACA;;;;;;AAMA,OAAO,eAAeI,mBAAmBA,CAACJ,GAAA,GAAcF,gBAAgB;EACtE,MAAMD,aAAa,CAACU,UAAU,GAAGP,GAAG,CAAC;AACvC"},"metadata":{},"sourceType":"module","externalDependencies":[]}